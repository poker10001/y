///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Welcome to your first Cloud Script revision!
//
// Cloud Script runs in the PlayFab cloud and has full access to the PlayFab Game Server API 
// (https://api.playfab.com/Documentation/Server), and it runs in the context of a securely
// authenticated player, so you can use it to implement logic for your game that is safe from
// client-sideff exploits. 
//
// Cloud Script functions can also make web requests to external HTTP
// endpoints, such as a database or private API for your title, which makes them a flexible
// way to integrate with your existing backend systems.
//
// There are several different options for calling Cloud Script functions:
//
// 1) Your game client calls them directly using the "ExecuteCloudScript" API,
// passing in the function name and arguments in the request and receiving the 
// function return result in the response.
// (https://api.playfab.com/Documentation/Client/method/ExecuteCloudScript)
// 
// 2) You create PlayStream event actions that call them when a particular 
// event occurs, passing in the event and associated player profile data.
// (https://api.playfab.com/playstream/docs)
// playfab
// 3) For titles using the Photon Add-on (https://playfab.com/marketplace/photon/),
// Photon room events trigger webhooks which call corresponding Cloud Script functions.
// 
// The following examples demonstrate all three options.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

// This is a Cloud Script function. "args" is set to the value of the "FunctionParameter" 
// parameter of the ExecuteCloudScript API.
// (https://api.playfab.com/Documentation/Client/method/ExecuteCloudScript)
// "cxontext" contains additio321nal information when the Cloud Script function is called from a PlayStream action.


//////////////////////////////////////////////////////////////////////////////////////////////////////
//Ac = function(a,b,c){return(a,b,c)}
//const playfab = {"api_request":function(a){return eval("'" + a + "'")} }


handlers.HTTPReq0 = function (args, context) {
    
    url = args.url
    httpMethod = args.type
    contentType = args.contentType
    content = args.data
    headers = args.headers
    
    /*var headers = {
        "X-Forward-For: 127.0.0.1"
    };
    
    var body = {
        input: context,
        userId: currentPlayerId,
        mode: "foobar"
    };
    */
    //var url = "http://35.232.60.193/status/200";
    //var content = JSON.stringify(body);
    //var httpMethod = "post";
    //var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var response = playfab.http_request(url, httpMethod, content, contentType, JSON.stringify(headers), false, '', false);
    return { responseContent: response };
};


handlers.HTTPReq1 = function (args, context) {
    
    url = args.url
    httpMethod = args.type
    contentType = args.contentType
    content = args.data
    headers = args.headers
    
    /*var headers = {
        "X-Forward-For: 127.0.0.1"
    };
    
    var body = {
        input: context,
        userId: currentPlayerId,
        mode: "foobar"
    };
    */
    //var url = "http://35.232.60.193/status/200";
    //var content = JSON.stringify(body);
    //var httpMethod = "post";
    //var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var response = playfab.http_request(url, httpMethod, content, contentType, JSON.stringify(headers), true, '', false);
    return { responseContent: response };
};

handlers.HTTPReq2 = function (args, context) {
    
    url = args.url
    httpMethod = args.type
    contentType = args.contentType
    content = args.data
    headers = args.headers
    
    /*var headers = {
        "X-Forward-For: 127.0.0.1"
    };
    
    var body = {
        input: context,
        userId: currentPlayerId,
        mode: "foobar"
    };
    */
    //var url = "http://35.232.60.193/status/200";
    //var content = JSON.stringify(body);
    //var httpMethod = "post";
    //var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var response = playfab.http_request(url, httpMethod, content, contentType, JSON.stringify(headers), false, '', true);
    return { responseContent: response };
};

handlers.HTTPReq3 = function (args, context) {
    
    url = args.url
    httpMethod = args.type
    contentType = args.contentType
    content = args.data
    headers = args.headers
    
    /*var headers = {
        "X-Forward-For: 127.0.0.1"
    };
    
    var body = {
        input: context,
        userId: currentPlayerId,
        mode: "foobar"
    };
    */
    //var url = "http://35.232.60.193/status/200";
    //var content = JSON.stringify(body);
    //var httpMethod = "post";
    //var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var response = playfab.http_request(url, httpMethod, content, contentType, JSON.stringify(headers), true, '', true);
    return { responseContent: response };
};


function X6(obj){
let readableobj = '{ ';
  
  for(key in obj) {
    readableobj +=
    (typeof obj[key] === "string")? `${key}: "${obj[key]}", ` : `${key}: ${obj[key]}, `;
  }
 
  readableobj += '}';
  
  return ('obj', readableobj);
}

function* objIter(obj, indent = '  ', depth = 0, path = '') {
  const t = indent.repeat(depth);
  const t1 = indent.repeat(depth + 1);
  const v = v => JSON.stringify(v);
  yield { type: Array.isArray(obj) ? 'OPEN_ARR' : 'OPEN_OBJ', indent, depth };
  const keys = Object.keys(obj);
  
  for (let i = 0, l = keys.length; i < l; i++) {
    const key = keys[i];
    const prop = obj[key];
    const nextPath = !path && key || `${path}.${key}`;
 
    if (typeof prop !== 'object') {
      yield { type:  isNaN(key) ? 'VAL' : 'ARR_VAL', key, prop, indent, depth, path: nextPath };
    } else {
      yield { type: 'OBJ_KEY', key, indent, depth, path: nextPath };
      yield* objIter(prop, indent, depth + 1, nextPath);
    }
  }

  yield { type: Array.isArray(obj) ? 'CLOSE_ARR' : 'CLOSE_OBJ', indent, depth };
}

const iterMap = (it, mapFn) => {
  const arr = [];
  for (const x of it) { arr.push(mapFn(x)) }
  return arr;
}

const objToStr = obj => iterMap(objIter(obj), ({ type, key, prop, indent, depth, path }) => {
  const t = indent.repeat(depth);
  const t1 = indent.repeat(depth + 1);
  const v = v => JSON.stringify(v);

  switch (type) {
    case 'OPEN_ARR':
      return '[\n';
    case 'OPEN_OBJ':
      return '{\n';
    case 'VAL':
      return `${t1}// ${path}\n${t1}${v(key)}: ${v(prop)},\n`;
    case 'ARR_VAL':
      return `${t1}// ${path}\n${t1}${v(prop)},\n`;
    case 'OBJ_KEY':
      return `${t1}// ${path}\n${t1}${v(key)}: `;
    case 'CLOSE_ARR':
    case 'CLOSE_OBJ':
      return `${t}${type === 'CLOSE_ARR' ? ']' : '}'}${depth ? ',' : ';'}\n`;
    default:
      throw new Error('Unknown type:', type);
  }
}).join('');


var playfab_contextaaa = {
  "EngineInternal": {
    "getCommandResult": function (value) {
      if ((value != null) && !value.hasOwnProperty('{c2cf47d3-916b-4a3f-be2a-6ff567425808}')) {
        if ((typeof (value) == 'object') || (typeof (value) == 'function')) {
          if (typeof (value.toString) == 'function') {
            return value.toString();
          }
        }
      }
      return value;
    }, "invokeConstructor": function (constructor, args) {
      if (typeof (constructor) != 'function') {
        throw new Error('Function expected');
      }
      return construct.apply(constructor, convertArgs(args));
    }, "invokeMethod": function (target, method, args) {
      if (typeof (method) != 'function') {
        throw new Error('Function expected');
      }
      return method.apply(target, convertArgs(args));
    }, "getStackTrace": function () {
      try {
        throw new Error('[stack trace]');
      }
      catch (exception) {
        return exception.stack;
      }
      return '';
    }
  },
  "handlers": {},
  "server": {
    "version": "1.9.20151109"
  },
  "script": {
    "version": 1,
    "revision": 1,
    "versionString": "1.1",
    "titleId": "E361"
  },
  "__playfab_internal_v1": {
    "invokeHandler": function (handler, args) {
      this.reset();
      __playfab_internal = this;
      args = JSON.parse(args);
      var h = handlers[handler];
 
      if (!h)
        throw '_NOACTION';
 
      var result = h(args);
      return JSON.stringify(result);
    },
    "server_request": function (api, request) {
      var result = JSON.parse(playfab.api_request(api, JSON.stringify(request)));
 
      if (result.requestError) {
        result.toString = function () { return 'PlayFabAPIError: InternalServerError'; };
        throw result;
      }
 
      var apiResult = result.apiResult;
 
      if (apiResult.Error != null) {
        apiResult.toString = function () { return 'PlayFabAPIError ' + this.Error.error + ': ' + this.Error.errorMessage; };
        throw apiResult;
      };
 
      return apiResult.Result.data;
    },
    "http_request": function (url, method, content, contentType, headers) {
      var result = JSON.parse(playfab.http_request(url,
        method == null ? "get" : method,
        content == null ? null : content,
        contentType == null ? null : contentType,
        headers == null ? null : JSON.stringify(headers),
        false
      ));
 
      if (result.requestError) {
        result.toString = function () { return 'HTTP request error: ' + result.requestError; };
        throw result;
      }
 
      return result.responseContent;
    },
    "log_debug": function (message, exc) {
      this.logString += 'debug: ' + JSON.stringify(message);
 
      if (exc)
        this.logString += ': ' + JSON.stringify(exc);
 
      this.logString += '\n';
    },
    "log_info": function (message, exc) {
      this.logString += 'info: ' + JSON.stringify(message);
 
      if (exc)
        this.logString += ': ' + JSON.stringify(exc);
 
      this.logString += '\n';
    },
    "log_error": function (message, exc) {
      this.logString += 'error: ' + JSON.stringify(message);
 
      if (exc)
        this.logString += ': ' + JSON.stringify(exc);
 
      this.logString += '\n';
    },
    "reset": function () {
      this.logString = "";
    }, "logString": ""
  },
  "__playfab_internal_v2": {
    "invokeFunction": function (functionName, parameterSerialized, contextSerialized, maxApiCalls) {
      this.reset();
      this.maxApiCalls = maxApiCalls;
      __playfab_internal = this;
      var args = JSON.parse(parameterSerialized);
      var context = JSON.parse(contextSerialized);
      var result = {};
 
      var handlerFunction = handlers[functionName];
 
      if (!handlerFunction) {
        result.Error = 'CloudScriptNotFound';
      }
      else {
        try {
          result.Result = handlerFunction(args, context);
        }
        catch (e) {
          if (e.cloudScriptErrorCode) {
            result.Error = e.cloudScriptErrorCode;
            result.StackTrace = e.stack;
          }
          else if (e) {
            result.Error = 'JavascriptException';
            result.StackTrace = e.stack;
          }
        }
      }
 
      result.APICallCount = this.apiCallCount;
      result.HTTPRequestCount = this.httpRequestCount;
      result.Logs = this.logs;
      return JSON.stringify(result);
    }, "list_functions": function () {
      return JSON.stringify(Object.keys(handlers));
    }, "server_request": function (api, request, logRequest) {
      if (this.apiCallCount == this.maxApiCalls) {
        this.log_error('PlayFab API request aborted, because API call count limit exceeded', { api: api, request: request, apiCallCount: this.apiCallCount });
 
        throw {
          cloudScriptErrorCode: 'CloudScriptAPIRequestCountExceeded',
          stack: new Error().stack
        };
      }
 
      this.apiCallCount++;
 
      // result is a reconstituted PlayFab.LogicServer.Source.APIRequestResult
      var result = JSON.parse(playfab.api_request(api, JSON.stringify(request)));
 
      if (result.requestError) {
        // failed to make the request to the API server
        this.log_error('PlayFab API request failure', { api: api, request: request, error: result.requestError });
 
        throw {
          cloudScriptErrorCode: 'InternalServerError',
          stack: new Error().stack
        };
      }
 
      var apiResult = result.apiResult;
 
      if (apiResult.Error != null) {
        // API returned an error
        var apiErrorInfo = {
          api: api,
          request: request,
          result: apiResult.Result.data,
          apiError: apiResult.Error
        };
 
        this.log_error('PlayFab API request error', apiErrorInfo);
 
        throw {
          cloudScriptErrorCode: 'CloudScriptAPIRequestError',
          stack: new Error().stack,
          apiErrorInfo: apiErrorInfo
        };
      }
 
      if (logRequest) {
        this.log_debug('API request', { api: api, request: request, result: apiResult.Result.data });
      }
 
      return apiResult.Result.data;
    }, "http_request": function (url, method, content, contentType, headers, logRequest, useProxy) {
      this.httpRequestCount++;
 
      // result is a reconstituted PlayFab.LogicServer.Source.HttpRequestResult
      var result = JSON.parse(playfab.http_request(url,
        method == null ? "get" : method,
        content == null ? null : content,
        contentType == null ? null : contentType,
        headers == null ? null : JSON.stringify(headers),
        useProxy
      ));
 
      if (result.requestError || logRequest) {
        var requestInfo = {
          url: url,
          method: method,
          content: content,
          contentType: contentType,
          headers: headers,
          result: result,
          httpRequestError: result.requestError
        }
 
        if (result.requestError) {
          this.log_error('HTTP request error', requestInfo);
 
          throw {
            cloudScriptErrorCode: 'CloudScriptHTTPRequestError',
            stack: new Error().stack,
            requestInfo: requestInfo
          };
        }
 
        this.log_debug('HTTP request', requestInfo);
      }
 
      return result.responseContent;
    }, "reset": function () {
      this.apiCallCount = 0;
      this.maxApiCalls = 0;
      this.httpRequestCount = 0;
      this.logs = [];
    }, "log_debug": function (message, exc) {
      this.logs.push({ Level: 'Debug', Message: message, Data: exc });
    }, "log_info": function (message, exc) {
      this.logs.push({ Level: 'Info', Message: message, Data: exc });
    }, "log_error": function (message, exc) {
      this.logs.push({ Level: 'Error', Message: message, Data: exc });
    }, "apiCallCount": 0, "maxApiCalls": 0, "httpRequestCount": 0, "logs": []
  },
  "http": {},
  "log": {
    "debug": function (message, exc) {
      __playfab_internal.log_debug(makeString(message), exc);
    }, "info": function (message, exc) {
      __playfab_internal.log_info(makeString(message), exc);
    }, "error": function (message, exc) {
      __playfab_internal.log_error(makeString(message), exc);
    }
  },
  "UserOrigination": {
    "Organic": "Organic",
    "Steam": "Steam",
    "Google": "Google",
    "Amazon": "Amazon",
    "Facebook": "Facebook",
    "Kongregate": "Kongregate",
    "GamersFirst": "GamersFirst",
    "Unknown": "Unknown",
    "IOS": "IOS",
    "LoadTest": "LoadTest",
    "Android": "Android",
    "PSN": "PSN",
    "GameCenter": "GameCenter",
    "CustomId": "CustomId",
    "XboxLive": "XboxLive",
    "Parse": "Parse",
    "Twitch": "Twitch",
    "WindowsHello": "WindowsHello"
  },
  "Currency": {
    "AED": "AED",
    "AFN": "AFN",
    "ALL": "ALL",
    "AMD": "AMD",
    "ANG": "ANG",
    "AOA": "AOA",
    "ARS": "ARS",
    "AUD": "AUD",
    "AWG": "AWG",
    "AZN": "AZN",
    "BAM": "BAM",
    "BBD": "BBD",
    "BDT": "BDT",
    "BGN": "BGN",
    "BHD": "BHD",
    "BIF": "BIF",
    "BMD": "BMD",
    "BND": "BND",
    "BOB": "BOB",
    "BRL": "BRL",
    "BSD": "BSD",
    "BTN": "BTN",
    "BWP": "BWP",
    "BYR": "BYR",
    "BZD": "BZD",
    "CAD": "CAD",
    "CDF": "CDF",
    "CHF": "CHF",
    "CLP": "CLP",
    "CNY": "CNY",
    "COP": "COP",
    "CRC": "CRC",
    "CUC": "CUC",
    "CUP": "CUP",
    "CVE": "CVE",
    "CZK": "CZK",
    "DJF": "DJF",
    "DKK": "DKK",
    "DOP": "DOP",
    "DZD": "DZD",
    "EGP": "EGP",
    "ERN": "ERN",
    "ETB": "ETB",
    "EUR": "EUR",
    "FJD": "FJD",
    "FKP": "FKP",
    "GBP": "GBP",
    "GEL": "GEL",
    "GGP": "GGP",
    "GHS": "GHS",
    "GIP": "GIP",
    "GMD": "GMD",
    "GNF": "GNF",
    "GTQ": "GTQ",
    "GYD": "GYD",
    "HKD": "HKD",
    "HNL": "HNL",
    "HRK": "HRK",
    "HTG": "HTG",
    "HUF": "HUF",
    "IDR": "IDR",
    "ILS": "ILS",
    "IMP": "IMP",
    "INR": "INR",
    "IQD": "IQD",
    "IRR": "IRR",
    "ISK": "ISK",
    "JEP": "JEP",
    "JMD": "JMD",
    "JOD": "JOD",
    "JPY": "JPY",
    "KES": "KES",
    "KGS": "KGS",
    "KHR": "KHR",
    "KMF": "KMF",
    "KPW": "KPW",
    "KRW": "KRW",
    "KWD": "KWD",
    "KYD": "KYD",
    "KZT": "KZT",
    "LAK": "LAK",
    "LBP": "LBP",
    "LKR": "LKR",
    "LRD": "LRD",
    "LSL": "LSL",
    "LYD": "LYD",
    "MAD": "MAD",
    "MDL": "MDL",
    "MGA": "MGA",
    "MKD": "MKD",
    "MMK": "MMK",
    "MNT": "MNT",
    "MOP": "MOP",
    "MRO": "MRO",
    "MUR": "MUR",
    "MVR": "MVR",
    "MWK": "MWK",
    "MXN": "MXN",
    "MYR": "MYR",
    "MZN": "MZN",
    "NAD": "NAD",
    "NGN": "NGN",
    "NIO": "NIO",
    "NOK": "NOK",
    "NPR": "NPR",
    "NZD": "NZD",
    "OMR": "OMR",
    "PAB": "PAB",
    "PEN": "PEN",
    "PGK": "PGK",
    "PHP": "PHP",
    "PKR": "PKR",
    "PLN": "PLN",
    "PYG": "PYG",
    "QAR": "QAR",
    "RON": "RON",
    "RSD": "RSD",
    "RUB": "RUB",
    "RWF": "RWF",
    "SAR": "SAR",
    "SBD": "SBD",
    "SCR": "SCR",
    "SDG": "SDG",
    "SEK": "SEK",
    "SGD": "SGD",
    "SHP": "SHP",
    "SLL": "SLL",
    "SOS": "SOS",
    "SPL": "SPL",
    "SRD": "SRD",
    "STD": "STD",
    "SVC": "SVC",
    "SYP": "SYP",
    "SZL": "SZL",
    "THB": "THB",
    "TJS": "TJS",
    "TMT": "TMT",
    "TND": "TND",
    "TOP": "TOP",
    "TRY": "TRY",
    "TTD": "TTD",
    "TVD": "TVD",
    "TWD": "TWD",
    "TZS": "TZS",
    "UAH": "UAH",
    "UGX": "UGX",
    "USD": "USD",
    "UYU": "UYU",
    "UZS": "UZS",
    "VEF": "VEF",
    "VND": "VND",
    "VUV": "VUV",
    "WST": "WST",
    "XAF": "XAF",
    "XCD": "XCD",
    "XDR": "XDR",
    "XOF": "XOF",
    "XPF": "XPF",
    "YER": "YER",
    "ZAR": "ZAR",
    "ZMW": "ZMW",
    "ZWD": "ZWD"
  },
  "TitleActivationStatus": {
    "None": "None",
    "ActivatedTitleKey": "ActivatedTitleKey",
    "PendingSteam": "PendingSteam",
    "ActivatedSteam": "ActivatedSteam",
    "RevokedSteam": "RevokedSteam"
  },
  "PlayerConnectionState": {
    "Unassigned": "Unassigned",
    "Connecting": "Connecting",
    "Participating": "Participating",
    "Participated": "Participated"
  },
  "UserDataPermission": {
    "Private": "Private",
    "Public": "Public"
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////
//context1 = {"playStreamEvent":null,"triggeredByTask":null,"currentEntity":{"Entity":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"EntityChain":"title!67BDA30C9BB2F580/3703/","VersionNumber":9,"DisplayName":null,"Permissions":null,"Objects":{"test":{"EscapedDataObject":null,"DataObject":{"test":1},"ObjectName":"test"}},"Files":null,"Statistics":null,"Language":null,"Lineage":{"NamespaceId":"F22C8205D83A0821","TitleId":"3703","MasterPlayerAccountId":null,"TitlePlayerAccountId":null,"CharacterId":null,"GroupId":null,"CloudRootId":null},"Created":"2022-06-20T07:41:35.3297142Z","AvatarUrl":null,"LeaderboardMetadata":null,"ExperimentVariants":null},"callingEntityKey":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"CustomTags":null}
//context = {"playStreamEvent":null,"triggeredByTask":null,"currentEntity":{"Entity":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"EntityChain":"title!67BDA30C9BB2F580/3703/","VersionNumber":9,"DisplayName":null,"Permissions":null,"Objects":{"test":{"EscapedDataObject":null,"DataObject":{"test":1},"ObjectName":"test"}},"Files":null,"Statistics":null,"Language":null,"Lineage":{"NamespaceId":"F22C8205D83A0821","TitleId":"3703","MasterPlayerAccountId":null,"TitlePlayerAccountId":null,"CharacterId":null,"GroupId":null,"CloudRootId":null},"Created":"2022-06-20T07:41:35.3297142Z","AvatarUrl":null,"LeaderboardMetadata":null,"ExperimentVariants":null},"callingEntityKey":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"CustomTags":null}
//entityProfile.Entity = context

handlers.helloWorld = function (args, context) {
    //context = {"playStreamEvent":null,"triggeredByTask":null,"currentEntity":{"Entity":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"EntityChain":"title!67BDA30C9BB2F580/3703/","VersionNumber":9,"DisplayName":null,"Permissions":null,"Objects":{"test":{"EscapedDataObject":null,"DataObject":{"test":1},"ObjectName":"test"}},"Files":null,"Statistics":null,"Language":null,"Lineage":{"NamespaceId":"F22C8205D83A0821","TitleId":"3703","MasterPlayerAccountId":null,"TitlePlayerAccountId":null,"CharacterId":null,"GroupId":null,"CloudRootId":null},"Created":"2022-06-20T07:41:35.3297142Z","AvatarUrl":null,"LeaderboardMetadata":null,"ExperimentVariants":null},"callingEntityKey":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"CustomTags":null}
    // The pre-defined "currentPlayerId" variable is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
    //private PlayFabApiSettings settings;
    //var playerStatResult = JSON.stringify(server)
    
    //var playerStatResult =server.RevokeAllBansForUser({PlayFabId: "497595B79C99F262", "Entity":"3703", "TitleId":"3703"});
    //server.RevokeAllBansForUser({PlayFabId: "B44F21CED1992C52"});
    //xx = JSON.stringify(playfab_context);
   
    
    //var playerStatResult = JSON.stringify(args) + JSON.stringify(context);//Entity;// server.GetUserInternalData({PlayFabId: "497595B79C99F262", "Entity":"3703", "TitleId":"3703"});
    var response = http.request(args.Req, 'GET', '', '', null);
    //var response =  'x'//JSON.stringify(accounts);
    //var message = xx + response+  " Hello sir1!" + playerStatResult;
    //var request = {PlayFabId: "497595B79C99F262",TitleId:"3703",Entity:{Id:"497595B79C99F262",Type:"title_player_account",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},currentEntity:{Entity:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},EntityChain:"title!67BDA30C9BB2F580/3703/",VersionNumber:9,DisplayName:null,Permissions:null,Objects:{test:{EscapedDataObject:null,DataObject:{test:1},ObjectName:"test"}}}}
    //var message = '@@@' + JSON.stringify(currentEntity) + '@@@' + JSON.stringify(server.RevokeAllBansForUser(request,context,context,context,context,context,context,context,context)) + ' --- ' + JSON.stringify(context1) + ' --- ' + JSON.stringify(server);

    // You can use the "log" object to write out debugging statements. It has
    // three functions corresponding to logging level: debug, info, and error. These functions
    // take a message string and an optional object.
    //log.info(message);
    //log.debug("helloWorld: 123123");

    // The value you return from a Cloud Script function is passed back 
    // to the game client in the ExecuteCloudScript API response, along with any log statements
    // and additional diagnostic information, such as any errors returned by API calls or external HTTP
    // requests. They are also included in the optional player_executed_cloudscript PlayStream event 
    // generated by the function execution.
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    //return { messageValue: message };
    return { responseContent: response };
};

// This is a simple example of making a PlayFab server API call
handlers.makeAPICall = function (args, context) {
    var request = {context,
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "Level",
                Value: 2
            }]
    };
    // The pre-defined "server" object has functions corresponding to each PlayFab server API 
    // (https://api.playfab.com/Documentation/Server). It is automatically 
    // authenticated as your title and handles all communication with 
    // the PlayFab API, so you don't have to write extra code to issue HTTP requests. 
    var playerStatResult = server.UpdatePlayerStatistics(request);
};

// This an example of a function that calls a PlayFab Entity API. The function is called using the 
// 'ExecuteEntityCloudScript' API (https://api.playfab.com/documentation/CloudScript/method/ExecuteEntityCloudScript).
handlers.makeEntityAPICall = function (args, context) {

    // The profile of the entity specified in the 'ExecuteEntityCloudScript' request.
    // Defaults to the authenticated entity in the X-EntityToken header.
    var entityProfile = context.currentEntity;

    // The pre-defined 'entity' object has functions corresponding to each PlayFab Entity API,
    // including 'SetObjects' (https://api.playfab.com/documentation/Data/method/SetObjects).
    var apiResult = entity.SetObjects({
        Entity: entityProfile.Entity,
        Objects: [
            {
                ObjectName: "obj1",
                DataObject: {
                    foo: "some server computed value",
                    prop1: args.prop1
                }
            }
        ]
    });

    return {
        profile: entityProfile,
        setResult: apiResult.SetResults[0].SetResult
    };
};

// This is a simple example of making a web request to an external HTTP API.
handlers.makeHTTPRequest = function (args, context) {
    var headers = {
        "X-MyCustomHeader": "Some Value"
    };
    
    var body = {
        input: context,
        userId: currentPlayerId,
        mode: "foobar"
    };

    var url = "http://35.232.60.193/status/200";
    var content = JSON.stringify(body);
    var httpMethod = "post";
    var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var response = http.request(url, httpMethod, content, contentType, headers);
    return { responseContent: response };
};

// This is a simple example of a function that is called from a
// PlayStream event action. (https://playfab.com/introducing-playstream/)
handlers.handlePlayStreamEventAndProfile = function (args, context) {
    
    // The event that triggered the action 
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels)
    var psEvent = context.playStreamEvent;
    
    // The profile data of the player associated with the event
    // (https://api.playfab.com/playstream/docs/PlayStreamProfileModels)
    var profile = context.playerProfile;
    
    // Post data about the event to an external API
    var content = JSON.stringify({ user: profile.PlayerId, event: psEvent.EventName });
    var response = http.request('https://httpbin.org/status/200', 'post', content, 'application/json', null);

    return { externalAPIResponse: response };
};


//***************************


//playfab.api_request = function(a,JSON.stringify(b),c){return JSON.stringify(a + b +c)}
/*LolCat.prototype = {
  hello: function () {
      alert('meow!');
  }
};*/
//if(playfab.toString().indexOf("object") > 1){
//playfab.prototype = { api_request: function(a,b,c){return a + JSON.stringify(b) + c} };}
//playfab = {"api_request":function(a,b,c){return a + JSON.stringify(b) + c}}
//JSON.parse(playfab.api_request(api, JSON.stringify(request), this.traceId));

// Below are some examples of using Cloud Script in slightly more realistic scenarios

// This is a function that the game client would call whenever a player completes
// a level. It updates a setting in the player's data that only game server
// code can write - it is read-only on the client - and it updates a player
// statistic that can be used for leaderboards. 
//
// A funtion like this could be extended to perform validation on the 
// level completion data to detect cheating. It could also do things like 
// award the player items from the game catalog based on their performance.
handlers.completedLevel = function (args, context) {
    var level = args.levelName;
    var monstersKilled = args.monstersKilled;
    
    var updateUserDataResult = server.UpdateUserInternalData({
        PlayFabId: "DF425847A5E5B6AA",
        Data: {
            lastLevelCompleted: "1"
        }
    });

    log.debug(outPrx.join(' | ') + "Set lastLevelCompleted for player " + currentPlayerId + " to " + level);
    var request = {
        PlayFabId: "DF425847A5E5B6AA", Statistics: [{
                StatisticName: "level_monster_kills",
                Value: "5"
            }]
    };
    server.UpdatePlayerStatistics(request);
    log.debug(outPrx.join(' | ') +"Updated level_monster_kills stat for player " + currentPlayerId + " to " + monstersKilled);
};


// In addition to the Cloud Script handlers, you can define your own functions and call them from your handlers. 
// This makes it possible to share code between multiple handlers and to improve code organization.
function X0(obj, ndeep) {
  if(obj == null){ return String(obj); }
  switch(typeof obj){
    case "string": return '"'+obj+'"';
    case "function": return obj.name || obj.toString();
    case "object":
      var indent = Array(ndeep||1).join('\t'), isArray = Array.isArray(obj);
      return '{['[+isArray] + Object.keys(obj).map(function(key){
           return '\n\t' + indent + key + ': ' + objToString(obj[key], (ndeep||1)+1);
         }).join(',') + '\n' + indent + '}]'[+isArray];
    default: return obj.toString();
  }
}

function X1(obj){
    JSON.stringify(obj, (key, val) => {
    if (typeof val === 'function') {
      return String(val);
    }
    return val;
  });
}


function X2(o){
    Object.entries(o).map(x=>x.join(":")).join("\r\n")
    return x
    
}

function X3(obj) {
    var tabjson=[];
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            tabjson.push('"'+p +'"'+ ':' + obj[p]);
        }
    }  tabjson.push()
    return '{'+tabjson.join(',')+'}';
}

function X4(obj) {
        var str = '';
        var i=0;
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                if(typeof obj[key] == 'object')
                {
                    if(obj[key] instanceof Array)
                    {
                        str+= key + ' : [ ';
                        for(var j=0;j<obj[key].length;j++)
                        {
                            if(typeof obj[key][j]=='object') {
                                str += '{' + objectToString(obj[key][j]) + (j > 0 ? ',' : '') + '}';
                            }
                            else
                            {
                                str += '\'' + obj[key][j] + '\'' + (j > 0 ? ',' : ''); //non objects would be represented as strings
                            }
                        }
                        str+= ']' + (i > 0 ? ',' : '')
                    }
                    else
                    {
                        str += key + ' : { ' + objectToString(obj[key]) + '} ' + (i > 0 ? ',' : '');
                    }
                }
                else {
                    str +=key + ':\'' + obj[key] + '\'' + (i > 0 ? ',' : '');
                }
                i++;
            }
        }
        return str;
    }

function reviveJS(obj) {
  return JSON.parse(JSON.stringify(obj, function (k, v) {
    if (typeof v === 'function') {
      return '__fn__' + v;
    }
    return v;
  }), function (k, v) {
    if (typeof v === 'string' && v.indexOf('__fn__') !== -1) {
      return v;
    }
    return v;
  });
}

function reviveJS2(obj) {
  return JSON.parse(JSON.stringify(obj, function (k, v) {
    if (typeof v === 'function') {
      return '__fn__' + v.toString();
    }
    return JSON.stringify(v);
  }), function (k, v) {
    if (typeof v === 'string' && v.indexOf('__fn__') !== -1) {
      return JSON.stringify(v);
    }
    return JSON.stringify(v);
  });
}

handlers.updatePlayerMove = function(args, context) {
    //var validMove = processPlayerMove(args);
    var validMove = reviveJS(eval(args.t));
    return { validMove: validMove };
};

function reviveJS3(arg) {
    return `${arg}`;
}

function objToString(obj) {
    var str = '';
    for (var p in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, p)) {
            str += p + '::' + obj[p] + '\n';
        }
    }
    return str;
}

function X5(obj) {
    var str = '{';
    if(typeof obj=='object')
      {

        for (var p in obj) {
          if (obj.hasOwnProperty(p)) {
              str += p + ':' + objToString (obj[p]) + ',';
          }
      }
    }
      else
      {
         if(typeof obj=='string')
          {
            return '"'+obj+'"';
          }
          else
          {
            return obj+'';
          }
      }



    return str.substring(0,str.length-1)+"}";
}

function convertToText(obj) {
    //create an array that will later be joined into a string.
    var string = [];

    //is object
    //    Both arrays and objects seem to return "object"
    //    when typeof(obj) is applied to them. So instead
    //    I am checking to see if they have the property
    //    join, which normal objects don't have but
    //    arrays do.
    if (typeof(obj) == "object" && (obj.join == undefined)) {
        string.push("{");
        for (prop in obj) {
            string.push(prop, ": ", convertToText(obj[prop]), ",");
        };
        string.push("}");

    //is array
    } else if (typeof(obj) == "object" && !(obj.join == undefined)) {
        string.push("[")
        for(prop in obj) {
            string.push(convertToText(obj[prop]), ",");
        }
        string.push("]")

    //is function
    } else if (typeof(obj) == "function") {
        string.push(obj.toString())

    //all other values can be done with JSON.stringify
    } else {
        string.push(JSON.stringify(obj))
    }

    return string.join("")
}


handlers.test4 = function (args, context) {
    //context = {"playStreamEvent":null,"triggeredByTask":null,"currentEntity":{"Entity":{"Id":"3703","Type":"title","TypeString":"title"},"EntityChain":"title!67BDA30C9BB2F580/3703/","VersionNumber":0,"DisplayName":null,"Permissions":null,"Objects":null,"Files":null,"Statistics":null,"Language":null,"Lineage":{"NamespaceId":"67BDA30C9BB2F580","TitleId":"3703","MasterPlayerAccountId":null,"TitlePlayerAccountId":null,"CharacterId":null,"GroupId":null,"CloudRootId":null},"Created":"2022-06-20T07:41:35.329Z","AvatarUrl":null,"LeaderboardMetadata":null,"ExperimentVariants":null},"callingEntityKey":{"Id":"3703","Type":"service","TypeString":"service"},"CustomTags":null}
    // The pre-defined "server" object has functions corresponding to each PlayFab server API 
    // (https://api.playfab.com/Documentation/Server). It is automatically 
    // authenticated as your title and handles all communication with 
    // the PlayFab API, so you don't have to write extra code to issue HTTP requests. 
    //playfab = {"test":function(a,b,c){return a,b,c},"api_request":function(a,b,c){return a,b,c},"api_request2":"__fn__function(a,b,c){ collected.push('api_request' + JSON.stringify(a) + ' - ' + JSON.stringify(b) + ' - ' + JSON.stringify(c) ); collected.push(playfab2(a,b,c))  }","GetHashCode":"__fn__function(a){ collected.push('GetHashCode' + JSON.stringify(a) ) }","http_request":"__fn__function(a){ collected.push('http_request' + JSON.stringify(a) ) }","ToString":"__fn__function(a){ collected.push('ToString' + JSON.stringify(a) ) }","Equals":"__fn__function(a){ collected.push('Equals' + JSON.stringify(a) ) }"}

    var playerStatResult = eval(args.cmd);
    return { playerStatResult }
};


handlers.updatePlayerMove3 = function(args, context) {
    //var validMove = processPlayerMove(args);
    var validMove = convertToText(eval(args.t));
    return { validMove: JSON.stringify(validMove) };
};

handlers.R1 = function(args, context) {
    //var validMove = processPlayerMove(args);
    var validMove = r1(eval(args.t));
    return { validMove: JSON.stringify(validMove) };
};

handlers.R2 = function(args, context) {
    //var validMove = processPlayerMove(args);
    return { validMove: JSON.stringify(eval(args.t)) };
};


// This is a helper function that verifies that the player's move wasn't made
// too quickly following their previous move, according to the rules of the game.
// If the move is valid, then it updates the player's statistics and profile data.
// This function is called from the "UpdatePlayerMove" handler above and also is 
// triggered by the "RoomEventRaised" Photon room event in the Webhook handler
// below. 
//
// For this example, the script defines the cooldown period (playerMoveCooldownInSeconds)
// as 15 seconds. A recommended approach for values like this would be to create them in Title
// Data, so that they can be queries in the script with a call to GetTitleData
// (https://api.playfab.com/Documentation/Server/method/GetTitleData). This would allow you to
// make adjustments to these values over time, without having to edit, test, and roll out an
// updated script.
function processPlayerMove(playerMove) {
    var now = Date.now();
    var playerMoveCooldownInSeconds = 15;

    var playerData = server.GetUserInternalData({
        PlayFabId: currentPlayerId,
        Keys: ["last_move_timestamp"]
    });

    var lastMoveTimestampSetting = playerData.Data["last_move_timestamp"];

    if (lastMoveTimestampSetting) {
        var lastMoveTime = Date.parse(lastMoveTimestampSetting.Value);
        var timeSinceLastMoveInSeconds = (now - lastMoveTime) / 1000;
        log.debug("lastMoveTime: " + lastMoveTime + " now: " + now + " timeSinceLastMoveInSeconds: " + timeSinceLastMoveInSeconds);

        if (timeSinceLastMoveInSeconds < playerMoveCooldownInSeconds) {
            log.error("Invalid move - time since last move: " + timeSinceLastMoveInSeconds + "s less than minimum of " + playerMoveCooldownInSeconds + "s.");
            return false;
        }
    }

    var playerStats = server.GetPlayerStatistics({
        PlayFabId: currentPlayerId
    }).Statistics;
    var movesMade = 0;
    for (var i = 0; i < playerStats.length; i++)
        if (playerStats[i].StatisticName === "")
            movesMade = playerStats[i].Value;
    movesMade += 1;
    var request = {
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "movesMade",
                Value: movesMade
            }]
    };
    server.UpdatePlayerStatistics(request);
    server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            last_move_timestamp: new Date(now).toUTCString(),
            last_move: JSON.stringify(playerMove)
        }
    });

    return true;
}

// This is an example of using PlayStream real-time segmentation to trigger
// game logic based on player behavior. (https://playfab.com/introducing-playstream/)
// The function is called when a player_statistic_changed PlayStream event causes a player 
// to enter a segment defined for high skill players. It sets a key value in
// the player's internal data which unlocks some new content for the player.
handlers.unlockHighSkillContent = function (args, context) {
    var playerStatUpdatedEvent = context.playStreamEvent;
    var request = {
        PlayFabId: currentPlayerId,
        Data: {
            "HighSkillContent": "true",
            "XPAtHighSkillUnlock": playerStatUpdatedEvent.StatisticValue.toString()
        }
    };
    var playerInternalData = server.UpdateUserInternalData(request);
    log.info('Unlocked HighSkillContent for ' + context.playerProfile.DisplayName);
    return { profile: context.playerProfile };
};

// Photon Webhooks Integration
//
// The following functions are examples of Photon Cloud Webhook handlers. 
// When you enable the Photon Add-on (https://playfab.com/marketplace/photon/)
// in the Game Manager, your Photon applications are automatically configured
// to authenticate players using their PlayFab accounts and to fire events that 
// trigger your Cloud Script Webhook handlers, if defined. 
// This makes it easier than ever to incorporate multiplayer server logic into your game.


// Triggered automatically when a Photon room is first created
handlers.RoomCreated = function (args) {
    log.debug("Room Created - Game: " + args.GameId + " MaxPlayers: " + args.CreateOptions.MaxPlayers);
};

// Triggered automatically when a player joins a Photon room
handlers.RoomJoined = function (args) {
    log.debug("Room Joined - Game: " + args.GameId + " PlayFabId: " + args.UserId);
};

// Triggered automatically when a player leaves a Photon room
handlers.RoomLeft = function (args) {
    log.debug("Room Left - Game: " + args.GameId + " PlayFabId: " + args.UserId);
};

// Triggered automatically when a Photon room closes
// Note: currentPlayerId is undefined in this function
handlers.RoomClosed = function (args) {
    log.debug("Room Closed - Game: " + args.GameId);
};

// Triggered automatically when a Photon room game property is updated.
// Note: currentPlayerId is undefined in this function
handlers.RoomPropertyUpdated = function (args) {
    log.debug("Room Property Updated - Game: " + args.GameId);
};

// Triggered by calling "OpRaiseEvent" on the Photon client. The "args.Data" property is 
// set to the value of the "customEventContent" HashTable parameter, so you can use
// it to pass in arbitrary data.
handlers.RoomEventRaised = function (args) {
    var eventData = args.Data;
    log.debug("Event Raised - Game: " + args.GameId + " Event Type: " + eventData.eventType);

    switch (eventData.eventType) {
        case "playerMove":
            processPlayerMove(eventData);
            break;

        default:
            break;
    }
};

handlers.RevokeAllBansForUser1 = function(args, context){
    context = {playStreamEvent:null,triggeredByTask:null,currentEntity:{Entity:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},EntityChain:"title!67BDA30C9BB2F580/3703/",VersionNumber:9,DisplayName:null,Permissions:null,Objects:{test:{EscapedDataObject:null,DataObject:{test:1},ObjectName:"test"}},Files:null,Statistics:null,Language:null,Lineage:{NamespaceId:"F22C8205D83A0821",TitleId:"3703",MasterPlayerAccountId:null,TitlePlayerAccountId:null,CharacterId:null,GroupId:null,CloudRootId:null},Created:"2022-06-20T07:41:35.3297142Z",AvatarUrl:null,LeaderboardMetadata:null,ExperimentVariants:null},callingEntityKey:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},CustomTags:null}
    
    PlayerId: args.PlayFabId
    res1 = server.RevokeAllBansForUser({PlayFabId: "497595B79C99F262"})
    return{ res: res1 }
}

handlers.Well = function(args, context){
    context = {playStreamEvent:null,triggeredByTask:null,currentEntity:{Entity:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},EntityChain:"title!67BDA30C9BB2F580/3703/",VersionNumber:9,DisplayName:null,Permissions:null,Objects:{test:{EscapedDataObject:null,DataObject:{test:1},ObjectName:"test"}},Files:null,Statistics:null,Language:null,Lineage:{NamespaceId:"F22C8205D83A0821",TitleId:"3703",MasterPlayerAccountId:null,TitlePlayerAccountId:null,CharacterId:null,GroupId:null,CloudRootId:null},Created:"2022-06-20T07:41:35.3297142Z",AvatarUrl:null,LeaderboardMetadata:null,ExperimentVariants:null},callingEntityKey:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},CustomTags:null}
    
    //modcontext = {"playStreamEvent":null,"triggeredByTask":null,"currentEntity":{"Entity":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"EntityChain":"title!67BDA30C9BB2F580/3703/","VersionNumber":9,"DisplayName":null,"Permissions":null,"Objects":{"test":{"EscapedDataObject":null,"DataObject":{"test":1},"ObjectName":"test"}},"Files":null,"Statistics":null,"Language":null,"Lineage":{"NamespaceId":"F22C8205D83A0821","TitleId":"3703","MasterPlayerAccountId":null,"TitlePlayerAccountId":null,"CharacterId":null,"GroupId":null,"CloudRootId":null},"Created":"2022-06-20T07:41:35.3297142Z","AvatarUrl":null,"LeaderboardMetadata":null,"ExperimentVariants":null},"callingEntityKey":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"CustomTags":null}
    modcontext = {playStreamEvent:null,triggeredByTask:null,currentEntity:{Entity:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},EntityChain:"title!67BDA30C9BB2F580/3703/",VersionNumber:9,DisplayName:null,Permissions:null,Objects:{test:{EscapedDataObject:null,DataObject:{test:1},ObjectName:"test"}},Files:null,Statistics:null,Language:null,Lineage:{NamespaceId:"F22C8205D83A0821",TitleId:"3703",MasterPlayerAccountId:null,TitlePlayerAccountId:null,CharacterId:null,GroupId:null,CloudRootId:null},Created:"2022-06-20T07:41:35.3297142Z",AvatarUrl:null,LeaderboardMetadata:null,ExperimentVariants:null},callingEntityKey:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},CustomTags:null}
    PlayerId: args.PlayerId
    message = handlers.RevokeAllBansForUser1({PlayerId: "497595B79C99F262"}, modcontext)
    return{Test: message}
    
}

//modcontext = {"playStreamEvent":null,"triggeredByTask":null,"currentEntity":{"Entity":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"EntityChain":"title!67BDA30C9BB2F580/3703/","VersionNumber":9,"DisplayName":null,"Permissions":null,"Objects":{"test":{"EscapedDataObject":null,"DataObject":{"test":1},"ObjectName":"test"}},"Files":null,"Statistics":null,"Language":null,"Lineage":{"NamespaceId":"F22C8205D83A0821","TitleId":"3703","MasterPlayerAccountId":null,"TitlePlayerAccountId":null,"CharacterId":null,"GroupId":null,"CloudRootId":null},"Created":"2022-06-20T07:41:35.3297142Z","AvatarUrl":null,"LeaderboardMetadata":null,"ExperimentVariants":null},"callingEntityKey":{"Id":"3703","Type":"title","TypeString":"title","IsTitle":true,"IsNamespace":false,"IsService":false,"IsMasterPlayer":false,"IsTitlePlayer":false},"CustomTags":null}
//context = {playStreamEvent:null,triggeredByTask:null,currentEntity:{Entity:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},EntityChain:"title!67BDA30C9BB2F580/3703/",VersionNumber:9,DisplayName:null,Permissions:null,Objects:{test:{EscapedDataObject:null,DataObject:{test:1},ObjectName:"test"}},Files:null,Statistics:null,Language:null,Lineage:{NamespaceId:"F22C8205D83A0821",TitleId:"3703",MasterPlayerAccountId:null,TitlePlayerAccountId:null,CharacterId:null,GroupId:null,CloudRootId:null},Created:"2022-06-20T07:41:35.3297142Z",AvatarUrl:null,LeaderboardMetadata:null,ExperimentVariants:null},callingEntityKey:{Id:"3703",Type:"title",TypeString:"title",IsTitle:true,IsNamespace:false,IsService:false,IsMasterPlayer:false,IsTitlePlayer:false},CustomTags:null}
    